---
- name: Get arch
  set_fact:
    lazysql_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'x86_64' }}"
    lazydocker_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' else 'x86_64' }}"
    neovim_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' else 'x86_64' }}"
    lazygit_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' else 'x86_64' }}"
    go_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' else 'amd64' }}"
    albert_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' else 'amd64' }}"
    docker_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' else 'amd64' }}"
    code_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' else 'amd64' }}"
    fastfetch_arch: "{{ 'aarch64' if ansible_architecture == 'aarch64' else 'amd64' }}"
    ghostty_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' else 'amd64' }}"

- name: Set timezone to Europe/Copenhagen
  become: true
  community.general.timezone:
    name: Europe/Copenhagen
  when: not ansible_virtualization_type == "docker"

- name: Update apt cache
  apt:
    update_cache: true
  become: true

- name: Install required packages
  apt:
    name:
      - software-properties-common
      - apt-transport-https
      - wget
      - curl
      - locales
    state: present
  become: true

- name: Create APT keyrings dir
  become: true
  ansible.builtin.file:
    path: "/etc/apt/keyrings"
    state: directory
    mode: "u=rwx,go=rx"

- name: Install vscode key
  become: true
  ansible.builtin.get_url:
    url: "https://packages.microsoft.com/keys/microsoft.asc"
    dest: "/etc/apt/keyrings/"
    mode: "u=rw,go=r"
    force: true

- name: Install VS Code repo
  become: true
  ansible.builtin.apt_repository:
    repo: >-
      deb [arch=amd64,arm64
      trusted=true
      signed-by=/etc/apt/keyrings/microsoft.asc]
      https://packages.microsoft.com/repos/code stable main
    filename: vscode
    state: present

- name: Install azure-cli repo
  become: true
  ansible.builtin.apt_repository:
    repo: >-
      deb [arch=amd64,arm64
      trusted=true
      signed-by=/etc/apt/keyrings/microsoft.asc]
      https://packages.microsoft.com/repos/azure-cli noble main
    filename: azure
    state: present

- name: Update apt cache again
  apt:
    update_cache: true
  become: true

- name: Install packages
  apt:
    name:
      - lua5.4
      - luarocks
      - zsh
      - git
      - tmux
      - sudo
      - python3-neovim
      - python3-dev
      - python3-pip
      - python3-venv
      - fontconfig
      - unzip
      - fd-find
      - bat
      - eza
      - ncdu
      - tree
      - clang
      - yq
      - cmake
      - build-essential
      - net-tools
      - traceroute
      - git-lfs
      - axel
      - clangd
      - snapd
      - cifs-utils
      - virtualenv
      - nfs-common
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - llvm
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
      - dcmtk
      - python3.12
      - code
      - azure-cli
      - sassc
      - gnome-themes-extra
      - gtk2-engines-murrine
      - gnome-tweaks
      - gnome-shell-extensions
      - openjdk-21-jdk
      - rustup
    state: present
  become: true

- name: Install ghostty
  include_role:
    name: common/linux/ghostty
  vars:
    arch: "{{ ghostty_arch }}"

- name: Set default terminal emulator
  become: true
  command: update-alternatives --set x-terminal-emulator /usr/bin/ghostty

- name: Install Docker
  include_role:
    name: common/linux/docker
  vars:
    arch: "{{ docker_arch }}"

- name: Install slack
  community.general.snap:
    name: slack
    classic: true
  become: true
  when: ansible_architecture != 'aarch64'

- name: Install ripgrep
  include_role:
    name: common/shared/ripgrep

- name: Install zoxide
  include_role:
    name: common/shared/zoxide

- name: Install Weasis
  include_role:
    name: common/linux/weasis

- name: Create local bin directory
  file:
    path: ${HOME}/.local/bin
    state: directory

- name: Create symlink for fd
  file:
    src: /usr/bin/fdfind
    dest: ${HOME}/.local/bin/fd
    state: link

- name: Create symlink for python
  shell: >
    rm -f $(dirname $(which python3))/python &&
    ln -s $(which python3.12) $(dirname $(which python3))/python
  become: true

- name: Create symlink for pip
  shell: >
    rm -f $(dirname $(which pip3))/pip &&
    ln -s $(which pip3.12) $(dirname $(which pip3))/pip
  become: true

- name: Create symlink for tmux
  file:
    src: /usr/bin/tmux
    dest: ${HOME}/.local/bin/tmux
    state: link

- name: Create symlink for bat
  file:
    src: /usr/bin/batcat
    dest: ${HOME}/.local/bin/bat
    state: link

- name: Install go
  include_role:
    name: common/shared/go
  vars:
    version: 1.23.0
    os: linux
    arch: "{{ go_arch }}"

- name: Setup Font
  include_role:
    name: common/linux/fonts
  vars:
    font_src: "{{playbook_dir}}/../NerdFonts/"

- name: Remove .config
  file:
    path: "${HOME}/.config"
    state: absent

- name: Create .config
  file:
    state: directory
    path: "${HOME}/.config"

- name: Setup zsh
  include_role:
    name: common/shared/zsh

- name: Download and install fnm
  include_role:
    name: common/shared/fnm

- name: Install lazySQL
  include_role:
    name: common/shared/lazysql

- name: Install lazyjournal
  include_role:
    name: common/shared/lazyjournal

- name: Install lazydocker
  include_role:
    name: common/shared/lazydocker

- name: Install lazygit
  include_role:
    name: common/shared/lazygit

- name: Install albert
  include_role:
    name: common/linux/albert
  vars:
    arch: "{{albert_arch}}"

- name: Install fastfetch
  include_role:
    name: common/linux/fastfetch
  vars:
    arch: "{{fastfetch_arch}}"

- name: Setup tmux
  include_role:
    name: common/shared/tpm

- name: Setup nvim
  include_role:
    name: common/shared/nvim
  vars:
    os: linux
    arch: "{{ neovim_arch }}"
    version: 0.11.2

- name: Install ulauncher deps
  command: pip install py-expression-eval  --break-system-packages

- name: Setup Gnome
  include_role:
    name: common/linux/gnome

- name: Copy files
  copy:
    src: "{{ item }}"
    dest: "${HOME}/.config/"
  loop:
    - "{{playbook_dir}}/../ghostty"
    - "{{playbook_dir}}/../fastfetch"
    - "{{playbook_dir}}/../autostart"
    - "{{playbook_dir}}/../albert"
    - "{{playbook_dir}}/../forge"

- pause:
    prompt: "Provide password for user root"
    echo: true
  register: root_password

- name: Set root password
  become: true
  ansible.builtin.shell: |
    echo "{{ root_password.user_input }}" | sudo -S passwd root
  when: root_password.user_input is defined

- pause:
    prompt: "Provide AZURE_PYPI_AUTH_URL"
    echo: true
  register: azure_pypi_auth_url

- when: azure_pypi_auth_url.user_input is defined and azure_pypi_auth_url.user_input.startswith("http")
  block:
    - name: Set Azure PyPi auth URL
      shell: >
        echo "export AZURE_PYPI_AUTH_URL={{ azure_pypi_auth_url.user_input }}" >> ${HOME}/.config/shell/exports.zsh
      when: azure_pypi_auth_url.user_input is defined

    - name: Setup global pip conf
      shell: >
        mkdir -p ${HOME}/.config/pip &&
        echo "[global]" >> ${HOME}/.config/pip/pip.conf &&
        echo "index-url = {{ azure_pypi_auth_url.user_input }}" >> ${HOME}/.config/pip/pip.conf

- name: Install Bitdefender
  include_role:
    name: common/linux/bitdefender
