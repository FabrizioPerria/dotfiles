---
- hosts: localhost
  gather_facts: true
  tasks:
    - name: Get os and arch
      set_fact:
        arch: "{{ 'arm64' if ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' else 'amd64' }}"
        os: "{{ 'linux' if ansible_os_family == 'Debian' else 'darwin' }}"
        fastfetch_arch: "{{ 'aarch64' if ansible_architecture == 'aarch64' else 'amd64' }}"
        exa_ns: "{{ 'RitchieS' if ansible_architecture == 'aarch64'  or ansible_architecture == 'arm64' else 'ptavares' }}"

    - name: Install packages on macOS
      homebrew:
        name:
          - python3
          - bash
          - fastfetch
          - tmux
          - neovim
          - fzf
          - ripgrep
          - fd
          - llvm
          - jq
          - git-lfs
          - eza
          - ncdu
          - bottom
          - cmake
          - unzip
          - thefuck
          - bat
          - wget
          - gnu-tar
          - alacritty
          - fontconfig
          - luarocks
          - axel
          - lazygit
          - lazydocker
        state: present
      when: ansible_os_family == "Darwin"

    - name: Install packages on macOS cask
      homebrew_cask:
        name:
          - nikitabobko/tap/aerospace
          - alfred
        state: present
      when: ansible_os_family == "Darwin"

    - name: Set timezone to Europe/Copenhagen
      become: true
      community.general.timezone:
        name: Europe/Copenhagen
      when: ansible_os_family == "Debian"

    - name: Update apt cache
      apt:
        update_cache: yes
      become: true
      when: ansible_os_family == "Debian"

    - name: Install required packages
      apt:
        name:
          - software-properties-common
          - apt-transport-https
          - wget
          - curl
          - locales
        state: present
      become: true
      when: ansible_os_family == "Debian"

    - name: Add Neovim PPA
      apt_repository:
        repo: ppa:neovim-ppa/unstable
      become: true
      when: ansible_os_family == "Debian"

    - name: Register the Regolith public key to local apt
      ansible.builtin.apt_key:
        url: https://regolith-desktop.org/regolith.key
        state: present
        keyring: /usr/share/keyrings/regolith-archive-keyring.gpg
      become: true
      when: ansible_os_family == "Debian"

    - name: Add the Regolith repository to apt sources
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ arch }} signed-by=/usr/share/keyrings/regolith-archive-keyring.gpg] https://regolith-desktop.org/release-3_0-ubuntu-jammy-{{arch}} jammy main"
        filename: "regolith"
        state: present
      become: true
      when: ansible_os_family == "Debian"

    - name: Update apt cache again
      apt:
        update_cache: yes
      become: true
      when: ansible_os_family == "Debian"

    - name: Install packages on Ubuntu
      apt:
        name:
          - lua5.4
          - luarocks
          - zsh
          - i3
          - picom
          - regolith-desktop
          - regolith-session-flashback
          - regolith-look-lascaille
          - gnome-screenshot
          - i3lock-fancy
          - git
          - tmux
          - neovim
          - sudo
          - python3-neovim
          - python3-dev
          - python3-pip
          - python3-venv
          - fontconfig
          - unzip
          - ripgrep
          - fd-find
          - bat
          - exa
          - ncdu
          - tree
          - clang
          - cmake
          - build-essential
          - net-tools
          - traceroute
          - jq
          - git-lfs
          - axel
          - sshfs
          - clangd
          - snapd
          - cargo
        state: present
      become: true
      when: ansible_os_family == "Debian"

    - name: Install i3-autolayout
      shell: cargo install --root /usr i3-autolayout
      become: true
      when: ansible_os_family == "Debian"

    - name: Install alacritty on Ubuntu
      community.general.snap:
        name: alacritty
        classic: true
      become: true
      when: ansible_os_family == "Debian"

    - name: Get the latest LazySQL version
      shell: |
        curl -s "https://api.github.com/repos/jorgerojas26/lazysql/releases/latest" | grep -Po '"tag_name": "v\K[^"]*'
      register: lazysql_version

    - name: Download LazySQL tarball
      get_url:
        url: "https://github.com/jorgerojas26/lazysql/releases/download/v{{ lazysql_version.stdout }}/lazysql_{{ ansible_os_family }}_{{ ansible_architecture }}.tar.gz"
        dest: "/tmp/lazysql.tar.gz"
      when: lazysql_version.stdout is defined

    - name: Extract LazySQL binary
      unarchive:
        src: "/tmp/lazysql.tar.gz"
        dest: "/tmp/"
        creates: "/tmp/lazysql"
        remote_src: yes
      when: lazysql_version.stdout is defined

    - name: Install LazySQL
      command: install /tmp/lazysql /usr/local/bin
      become: true
      when: lazysql_version.stdout is defined

    - name: Get the latest LazyDocker version
      shell: |
        curl -s "https://api.github.com/repos/jesseduffield/lazydocker/releases/latest" | grep -Po '"tag_name": "v\K[^"]*'
      register: lazydocker_version
      when: ansible_os_family == "Debian"

    - name: Download LazyDocker tarball
      get_url:
        url: "https://github.com/jesseduffield/lazydocker/releases/latest/download/lazydocker_{{ lazydocker_version.stdout }}_Linux_x86_64.tar.gz"
        dest: "/tmp/lazydocker.tar.gz"
      when: lazydocker_version.stdout is defined

    - name: Extract LazyDocker binary
      unarchive:
        src: "/tmp/lazydocker.tar.gz"
        dest: "/tmp/"
        creates: "/tmp/lazydocker"
        remote_src: yes
      when: lazydocker_version.stdout is defined

    - name: Install LazyDocker
      command: install /tmp/lazydocker /usr/local/bin
      become: true
      when: lazydocker_version.stdout is defined

    - name: Get the latest LazyGit version
      shell: |
        curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*'
      register: lazygit_version
      when: ansible_os_family == "Debian"

    - name: Download LazyGit tarball
      get_url:
        url: "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_{{ lazygit_version.stdout }}_Linux_x86_64.tar.gz"
        dest: "/tmp/lazygit.tar.gz"
      when: lazygit_version.stdout is defined

    - name: Extract LazyGit binary
      unarchive:
        src: "/tmp/lazygit.tar.gz"
        dest: "/tmp/"
        creates: "/tmp/lazygit"
        remote_src: yes
      when: lazygit_version.stdout is defined

    - name: Install LazyGit
      command: install /tmp/lazygit /usr/local/bin
      become: true
      when: lazygit_version.stdout is defined

    - name: Download the latest release of fastfetch
      get_url:
        url: "https://github.com/fastfetch-cli/fastfetch/releases/latest/download/fastfetch-linux-{{fastfetch_arch}}.deb"
        dest: "/tmp/fastfetch.deb"
      when: ansible_os_family == "Debian"

    - name: Install fastfetch deb
      apt:
        deb: "/tmp/fastfetch.deb"
      become: true
      when: ansible_os_family == "Debian"

    - name: Download and install NVM
      shell: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
      args:
        creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

    - name: Load NVM and install Node.js
      shell: >
        . {{ ansible_env.HOME }}/.nvm/nvm.sh &&
        nvm install --lts &&
        nvm alias default lts/*
      environment:
        NVM_DIR: "{{ ansible_env.HOME }}/.nvm"
      args:
        executable: /bin/bash

    - name: Download fzf
      git:
        repo: "https://github.com/junegunn/fzf.git"
        dest: "${HOME}/.fzf"
        depth: 1

    - name: Install fzf
      command: ${HOME}/.fzf/install --all --no-update-rc

    - name: Create local bin directory
      file:
        path: ${HOME}/.local/bin
        state: directory
      when: ansible_os_family == "Debian"

    - name: Create symlink for fd
      file:
        src: /usr/bin/fdfind
        dest: ${HOME}/.local/bin/fd
        state: link
      when: ansible_os_family == "Debian"

    - name: Create symlink for python
      shell: rm -f $(dirname $(which python3))/python && ln -s $(which python3) $(dirname $(which python3))/python
      become: true

    - name: Create symlink for tmux (Mac)
      file:
        src: /opt/homebrew/bin/tmux
        dest: /usr/local/bin/tmux
        state: link
      become: true
      when: ansible_os_family == "Darwin"

    - name: Create symlink for tmux (Linux)
      file:
        src: /usr/bin/tmux
        dest: /usr/local/bin/tmux
        state: link
      become: true
      when: ansible_os_family == "Debian"

    - name: Create symlink for bat
      file:
        src: /usr/bin/batcat
        dest: ${HOME}/.local/bin/bat
        state: link
      when: ansible_os_family == "Debian"

    - name: Remove any existing Go installation
      file:
        path: /usr/local/go
        state: absent
      become: true

    - name: Download Go
      get_url:
        url: https://go.dev/dl/go1.23.0.{{ os }}-{{ arch }}.tar.gz
        dest: /tmp/go.tar.gz

    - name: Extract go.tar.gz
      unarchive:
        src: "/tmp/go.tar.gz"
        dest: "/usr/local/"
        remote_src: yes
      become: true

    - name: Remove Go tarball
      file:
        path: /tmp/go.tar.gz
        state: absent

    - name: Install Go tools
      become: true
      environment:
        PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"
      shell: |
        /usr/local/go/bin/go install golang.org/x/tools/gopls@latest
        /usr/local/go/bin/go install github.com/go-delve/delve/cmd/dlv@latest
        /usr/local/go/bin/go install golang.org/x/tools/cmd/goimports@latest
        /usr/local/go/bin/go install golang.org/x/tools/cmd/gorename@latest

    - name: Generate locale
      locale_gen:
        name: en_US.UTF-8
        state: present
      become: true
      when: ansible_os_family == "Debian"

    - name: Remove .oh-my-zsh
      file:
        path: "${HOME}/.oh-my-zsh"
        state: absent

    - name: Remove .tmux
      file:
        path: "${HOME}/.tmux"
        state: absent

    - name: Install oh-my-zsh
      shell: bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

    - name: tpm
      shell: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

    - name: Clone repositories
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        depth: 1
      loop:
        - {
            repo: "https://github.com/romkatv/powerlevel10k.git",
            dest: "${HOME}/.oh-my-zsh/custom/themes/powerlevel10k",
          }
        - {
            repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git",
            dest: "${HOME}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting",
          }
        - {
            repo: "https://github.com/zsh-users/zsh-autosuggestions",
            dest: "${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions",
          }
        - {
            repo: "https://github.com/wfxr/forgit.git",
            dest: "${HOME}/.oh-my-zsh/custom/plugins/forgit",
          }
        - {
            repo: "https://github.com/MichaelAquilina/zsh-autoswitch-virtualenv.git",
            dest: "${HOME}/.oh-my-zsh/custom/plugins/autoswitch_virtualenv",
          }
        - {
            repo: "https://github.com/{{ exa_ns }}/zsh-exa.git",
            dest: "${HOME}/.oh-my-zsh/custom/plugins/zsh-exa",
          }

    - name: Remove .config
      file:
        path: "${HOME}/.config"
        state: absent

    - name: ensure fonts directory
      file:
        path: "${HOME}/.fonts"
        state: directory
      when: ansible_os_family == 'Debian'

    - name: Copy font files on ubuntu
      copy:
        src: "../NerdFonts/"
        dest: "${HOME}/.fonts/"
      when: ansible_os_family == 'Debian'

    - name: Copy font files on mac
      copy:
        src: "../NerdFonts/"
        dest: "/Library/Fonts/"
      when: ansible_os_family == 'Darwin'

    - name: Refresh font cache
      shell: fc-cache -fv
      become: true
      when: ansible_os_family == 'Debian'

    - name: Copy files
      copy:
        src: "{{ item }}"
        dest: "${HOME}/.config/"
      loop:
        - "../fzf"
        - "../nvim"
        - "../shell"
        - "../tmux"
        - "../alacritty"
        - "../fastfetch"

    - name: Copy files (linux only)
      copy:
        src: "{{ item }}"
        dest: "${HOME}/.config/"
      loop:
        - "../regolith3"
      when: ansible_os_family == 'Debian'

    - name: Make bar scripts executable
      file:
        path: "${HOME}/.config/regolith3/i3xrocks/scripts"
        recurse: yes
        state: directory
        mode: "u+x"
      when: ansible_os_family == 'Debian'

    - name: Make launch scripts executable
      file:
        path: "{{ item }}"
        mode: "u+x"
      loop:
        - "${HOME}/.config/alacritty/launch"
        - "${HOME}/.config/regolith3/picom/init"
      when: ansible_os_family == 'Debian'

    - name: update-alternatives for alacritty
      community.general.alternatives:
        name: x-terminal-emulator
        path: "{{ ansible_env.HOME }}/.config/alacritty/launch"
        priority: 100
      when: ansible_os_family == "Debian"
      become: true

    - name: setup wallpaper for regolith
      blockinfile:
        path: "${HOME}/.config/regolith3/Xresources"
        block: |
          regolith.wallpaper.file: {{ ansible_env.HOME }}/.config/regolith3/desktop.jpeg
          regolith.lockscreen.wallpaper.file: {{ ansible_env.HOME }}/.config/regolith3/desktop.jpeg
      when: ansible_os_family == "Debian"

    - name: Copy files (mac only)
      copy:
        src: "{{ item }}"
        dest: "${HOME}/.config/"
      loop:
        - "../aerospace"
      when: ansible_os_family == 'Darwin'

    - name: Add source commands to .zshrc
      blockinfile:
        path: "${HOME}/.zshrc"
        block: |
          source ${HOME}/.config/shell/aliases.zsh
          source ${HOME}/.config/shell/exports.zsh
          source ${HOME}/.config/shell/zsh.zsh
          source ${HOME}/.config/shell/p10k.zsh
          source ${HOME}/.config/shell/colors.zsh
          source ${HOME}/.config/fzf/completion.sh
          source ${HOME}/.config/fzf/keybindings.sh
          export PATH="$PATH:/usr/local/go/bin:$HOME/.local/bin"
          export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh"
        create: yes

    - name: Run tmux plugin install script
      command: ${HOME}/.tmux/plugins/tpm/scripts/install_plugins.sh

    - name: Remove nvim cache
      file:
        path: "${HOME}/.cache/nvim"
        state: absent

    - name: Remove nvim plugins
      file:
        path: "${HOME}/.local/share/nvim"
        state: absent

    - name: Remove nvim logs
      file:
        path: "${HOME}/.local/state/nvim"
        state: absent

    - name: Set default shell to zsh
      user:
        name: "{{ansible_env.USER}}"
        force: true
        shell: /bin/zsh
      become: true

    # - name: Run nvim commands
    #   environment:
    #     PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"
    #     NVM_DIR: "{{ ansible_env.HOME }}/.nvm"
    #   shell: ". ${NVM_DIR}/nvm.sh && nvim --headless +TSUpdateSync +MasonToolsInstallSync +qa"

  environment:
    LANG: en_US.UTF-8
    LANGUAGE: en_US:en
    LC_ALL: en_US.UTF-8
